HOW THIS PROJECT DOES SCRUM
---------------------------

The Scrum Master role equates to my general intention to do Scrum. It won't explicitly
appear unless I record a task to "remove an impediment to progress".

Backlog items can be added to project_tracking/backlog.txt at any time.

Backlog items are a single line:
[<points>] <description>

Sub-tasks are indented lines under an item. (Or they are split into new items.)

A point corresponds to the amount of coding which I think you could be done in 5 to 15 minutes.
In reality, all the work associated with a point is expected to take about an hour. (i.e. 1 weekday lunch)

Since this is just a game, priority doesn't have its usual meaning. However, all the stories needed
to do something meaningful should be added to a sprint together. And remaining items needed to make a
completed item useful have top priority in the next sprint.

Notes and minor planning can be added under an item, on lines prefixed with "//".

Further planning can go in a file <item>_PLANNING.txt in the dev_docs directory.

All to-do's should be tracked as backlog items. Weird backlog items are a fair price to pay 
in exchange for having only one central place to see everything that's to-do.


SPRINTS:

Sprints are one week long, ending/starting first thing Saturday. Days are real days.

Because most "days" are so short (just my lunch break), reading and trying stuff will be
explicit backlog items. (I'm the product owner. And learning is something I want.)


THE  SPRINT REVIEW+RETROSPECTIVE+PLANNING EVENT (15 min, not including playing the game):
1. Play the game
2. Make a free-form entry into project_tracking/review_retro_log.txt
3. Delete items completed in the sprint from project_tracking/backlog.txt.
4. Move the old sprint_backlog.txt to project_tracking/archive/sprint_backlog_<n>.txt
5. Add backlog items which might be in new sprint to a new project_tracking/sprint_backlog.txt
6. Assign points to backlog items which might be in the next sprint
7. Add detailed tasks to selected backlog items (data, logic, UI). 
8. Split items if needed.
9. Review the plan and remove items if needed until the sprint seems practical
10. Bias toward undercommiting, since I might not be free and productive on all lunch breaks.

TRACKING:

Add "-" at the start of the line in sprint_backlog.txt when I start working on an item or subtask.
Update to "---", for done, with tests, all green, and manual testing good too.


STANDUPS:

I had a process for updating a log with what I would have said in a standup. 
But it didn't add anything beyond what I got from looking at the sprint backlog file.


COMPLETING A SPRINT EARLY:

If a sprint's items are all completed early, do the sprint ending and beginning stuff imediately.
Then, depending on time remaining, decide whether to do a mini-sprint with the remaining days,
or to plan a long sprint with the remaining days plus the next week. In either case, the next
sprint is planned to end on Saturday.
